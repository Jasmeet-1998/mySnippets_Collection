require("dotenv").config({path: __dirname + './credentials'});
//need to require all the needed Dependencies and Modules
const xoauth2= require("xoauth2");
const nodeMailer=require("nodemailer");
const recipientList="receiver@example.com";//Note this is a bad practice always use environment variable to wrap the sensitive data here comes the list of user .
//to whom you are going to send Email, for multiple users you could use array
//and then pass it to the send mail function below.
const senderEmail=process.env.USER;



//Step-1
//Create a node mailer Transporter the Common one is SMTP
//built in transporter method like sendMail,
//ses->handles large traffic of emails by sending them via AMAZON SES.
//stream-> a buffer for testing purposes ,to return messages.
//and you can also make your own transporter method.

//SMTP TRANSPORTER(host,port,authentication,method)
//create a test account
//to use gmail services from third party app you need oauth services.
//refer how to use OAuth2 with nodemailer-> https://nodemailer.com/smtp/oauth2/
module.exports={
	sendMail:async (subject,text,to = recipientList)=>{
		try{
			const transporter = nodeMailer.createTransport({
				service: 'gmail',
//service:process.env.SERVICE,//google ,yahoo or any other mailing service.
				//host: process.env.HOST,//replace this with your company/individual SMTP server host in this case we are using autogenerated email test-accounts on Ethereal,mailtrap(a fake smtp service). 
    			//port: process.env.PORT,//replace port you want to expose to send the mails 
    			//secure:false,//you can add here  a middleware instead of this.
				//for using OAuth2 with node mailer refer next line link docs
				//https://nodemailer.com/smtp/oauth2/#example-3
				//Remember you need to do certain steps before using node mailer with gmail
				//1.)set 2 factor authentication and make app password for the gmail account that will be used as sender.
				//2.)create a project in google console and in gmail api enable it  to web application.
				//3.)set up OAuth consent screen and the parameter inside it  as Authorised redirect URIs:https://developers.google.com/oauthplayground
				//4.)now in OAuth2.0 playgrounds set up your OAuth api and Declare the scope as https://mail.google.com
				//5.)now authorize it and click on the automatic refresh button.
				//the client id,client secret will be shown when you create new project in gmail api and the refresh token and acess token will be dispalyed in the Oauth2.0 playground last step i.e 3rd step.
				auth: {
					type: "OAuth2",
					user:"alpacinobot02@gmail.com",
					clientId:'378588698148-1g5jocr2rt5q4c6jge9ucl0su9hhp8k5.apps.googleusercontent.com',
					clientSecret:'SXs9hj0AkNLGsnbWZiPNDtEy',
					refreshToken:'1//04jHxeJ3GzsTOCgYIARAAGAQSNwF-L9IrTnUPqxPR203gErRyuZmcGjzb9zjt2x03xvQ3r7OYggojWHqGHZKvgnRKkjDAUz58-_A',
					accessToken:"ya29.a0AfH6SMA86PYz6ra4kVL-pW_xuAfrTWlYePit1au_rUh12Ame1jVImgCYrrYOW4N3eEzvztb4tnZ5f3wOg46zpyxJ4mwN1-_PE5rQsAZpNBugnpSQyKqLtfUnbfh3-DFvI3tZMmSwd8ui_D83AVtzcHTx4Hh6Tlcinx0"
				},
				debug: true,//show debug output
				logger: true//log info in console
});
//STEP-2
//set nodemailer message options
//specify sender,message receiptants,message
//Attachments in node mailer
//different data can be attached to message by following main properties
//filename ,content,path,href, in addition to that it is possible to attach images by specifying filename path and a unique cid,encoding content to buffer type Buffer.from("here goes the encoding",base64/binary.etc)

const message={
	From:'"Testing Email Automator"<$senderEmail>',
	to,//you can place here multiple addreses who will recieve this email like 'user1@gmail.com,user2@gmail.com,user3@gmail.com'
	subject,
	text:subject,
	html:"<b>Hello!</b><br>this is the Second message You are Getting from Node-mailer",
	
};
//Step-3
//Sending the Email by sendMail() method
	transporter.sendMail(message,()=>{});
	}catch(err){
		console.log("Oops,Something Went Wrong");
		console.log(err);
	}

	},
};







